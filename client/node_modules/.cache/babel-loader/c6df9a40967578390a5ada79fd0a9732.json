{"ast":null,"code":"import UserActionTypes from \"./user.types\"; // user actions\n\nimport { signInSuccess, signInFailure, signOutFailure, signOutSuccess, signUpSuccess, signUpFailure } from \"./user.actions\"; // saga\n\nimport { takeLatest, put, all, call } from \"redux-saga/effects\"; //firebase\n\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { signInWithPopup, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport { getDoc } from \"firebase/firestore\";\nexport function* getSnapShotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapShot = yield getDoc(userRef);\n    yield put(signInSuccess({\n      id: userSnapShot.id,\n      ...userSnapShot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield signInWithPopup(auth, googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield signInWithEmailAndPassword(auth, email, password);\n\n    if (user === undefined) {\n      return;\n    }\n\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser(); // check if user is signed in or not\n\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signUserOut() {\n  try {\n    yield signOut(auth);\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUserUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield createUserWithEmailAndPassword(auth, email, password);\n    console.log(user);\n    console.log(displayName);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapShotFromUserAuth(user, additionalData);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signUserOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUserUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["/Users/mert/Desktop/Side Projects/ecommerce-app/src/redux/user/user.sagas.js"],"names":["UserActionTypes","signInSuccess","signInFailure","signOutFailure","signOutSuccess","signUpSuccess","signUpFailure","takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInWithPopup","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","getDoc","getSnapShotFromUserAuth","userAuth","additionalData","userRef","userSnapShot","id","data","error","signInWithGoogle","user","signInWithEmail","payload","email","password","undefined","isUserAuthenticated","signUserOut","signUserUp","displayName","console","log","signInAfterSignUp","onEmailSignInStart","EMAIL_SIGN_IN_START","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B,C,CAEA;;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,cAJF,EAKEC,aALF,EAMEC,aANF,QAOO,gBAPP,C,CASA;;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C,C,CAEA;;AACA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,EAIEC,cAJF,QAKO,+BALP;AAOA,SACEC,eADF,EAEEC,0BAFF,EAGEC,8BAHF,EAIEC,OAJF,QAKO,eALP;AAMA,SAASC,MAAT,QAAuB,oBAAvB;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4CC,cAA5C,EAA4D;AACjE,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMb,IAAI,CACxBG,yBADwB,EAExBQ,QAFwB,EAGxBC,cAHwB,CAA1B;AAKA,UAAME,YAAY,GAAG,MAAML,MAAM,CAACI,OAAD,CAAjC;AAEA,UAAMf,GAAG,CAACP,aAAa,CAAC;AAAEwB,MAAAA,EAAE,EAAED,YAAY,CAACC,EAAnB;AAAuB,SAAGD,YAAY,CAACE,IAAb;AAA1B,KAAD,CAAd,CAAT;AACD,GATD,CASE,OAAOC,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACN,aAAa,CAACyB,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMd,eAAe,CAACJ,IAAD,EAAOC,cAAP,CAAtC;AACA,UAAMQ,uBAAuB,CAACS,IAAD,CAA7B;AACD,GAHD,CAGE,OAAOF,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACN,aAAa,CAACyB,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUG,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF,UAAM;AAAEJ,MAAAA;AAAF,QAAW,MAAMb,0BAA0B,CAACL,IAAD,EAAOqB,KAAP,EAAcC,QAAd,CAAjD;;AACA,QAAIJ,IAAI,KAAKK,SAAb,EAAwB;AACtB;AACD;;AACD,UAAMd,uBAAuB,CAACS,IAAD,CAA7B;AACD,GAND,CAME,OAAOF,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACN,aAAa,CAACyB,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUQ,mBAAV,GAAgC;AACrC,MAAI;AACF,UAAMd,QAAQ,GAAG,MAAMP,cAAc,EAArC,CADE,CAEF;;AACA,QAAI,CAACO,QAAL,EAAe;AACf,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACD,GALD,CAKE,OAAOM,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACN,aAAa,CAACyB,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUS,WAAV,GAAwB;AAC7B,MAAI;AACF,UAAMlB,OAAO,CAACP,IAAD,CAAb;AACA,UAAMH,GAAG,CAACJ,cAAc,EAAf,CAAT;AACD,GAHD,CAGE,OAAOuB,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACL,cAAc,CAACwB,KAAD,CAAf,CAAT;AACD;AACF;AAED,OAAO,UAAUU,UAAV,CAAqB;AAAEN,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBK,IAAAA;AAAnB;AAAX,CAArB,EAAoE;AACzE,MAAI;AACF,UAAM;AAAET,MAAAA;AAAF,QAAW,MAAMZ,8BAA8B,CACnDN,IADmD,EAEnDqB,KAFmD,EAGnDC,QAHmD,CAArD;AAKAM,IAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;AACA,UAAM9B,GAAG,CAACH,aAAa,CAAC;AAAEwB,MAAAA,IAAF;AAAQP,MAAAA,cAAc,EAAE;AAAEgB,QAAAA;AAAF;AAAxB,KAAD,CAAd,CAAT;AACD,GATD,CASE,OAAOX,KAAP,EAAc;AACd,UAAMnB,GAAG,CAACF,aAAa,CAACqB,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUc,iBAAV,CAA4B;AAAEV,EAAAA,OAAO,EAAE;AAAEF,IAAAA,IAAF;AAAQP,IAAAA;AAAR;AAAX,CAA5B,EAAmE;AACxE,QAAMF,uBAAuB,CAACS,IAAD,EAAOP,cAAP,CAA7B;AACD;AAED,OAAO,UAAUoB,kBAAV,GAA+B;AACpC,QAAMnC,UAAU,CAACP,eAAe,CAAC2C,mBAAjB,EAAsCb,eAAtC,CAAhB;AACD;AAED,OAAO,UAAUc,mBAAV,GAAgC;AACrC,QAAMrC,UAAU,CAACP,eAAe,CAAC6C,oBAAjB,EAAuCjB,gBAAvC,CAAhB;AACD;AAED,OAAO,UAAUkB,cAAV,GAA2B;AAChC,QAAMvC,UAAU,CAACP,eAAe,CAAC+C,cAAjB,EAAiCX,WAAjC,CAAhB;AACD;AAED,OAAO,UAAUY,aAAV,GAA0B;AAC/B,QAAMzC,UAAU,CAACP,eAAe,CAACiD,aAAjB,EAAgCZ,UAAhC,CAAhB;AACD;AAED,OAAO,UAAUa,eAAV,GAA4B;AACjC,QAAM3C,UAAU,CAACP,eAAe,CAACmD,eAAjB,EAAkCV,iBAAlC,CAAhB;AACD;AACD,OAAO,UAAUW,kBAAV,GAA+B;AACpC,QAAM7C,UAAU,CAACP,eAAe,CAACqD,kBAAjB,EAAqClB,mBAArC,CAAhB;AACD;AAED,OAAO,UAAUmB,SAAV,GAAsB;AAC3B,QAAM7C,GAAG,CAAC,CACRC,IAAI,CAACkC,mBAAD,CADI,EAERlC,IAAI,CAACgC,kBAAD,CAFI,EAGRhC,IAAI,CAAC0C,kBAAD,CAHI,EAIR1C,IAAI,CAACoC,cAAD,CAJI,EAKRpC,IAAI,CAACsC,aAAD,CALI,EAMRtC,IAAI,CAACwC,eAAD,CANI,CAAD,CAAT;AAQD","sourcesContent":["import UserActionTypes from \"./user.types\";\n\n// user actions\nimport {\n  signInSuccess,\n  signInFailure,\n  signOutFailure,\n  signOutSuccess,\n  signUpSuccess,\n  signUpFailure,\n} from \"./user.actions\";\n\n// saga\nimport { takeLatest, put, all, call } from \"redux-saga/effects\";\n\n//firebase\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n  getCurrentUser,\n} from \"../../firebase/firebase.utils\";\n\nimport {\n  signInWithPopup,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut,\n} from \"firebase/auth\";\nimport { getDoc } from \"firebase/firestore\";\n\nexport function* getSnapShotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(\n      createUserProfileDocument,\n      userAuth,\n      additionalData\n    );\n    const userSnapShot = yield getDoc(userRef);\n\n    yield put(signInSuccess({ id: userSnapShot.id, ...userSnapShot.data() }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithGoogle() {\n  try {\n    const { user } = yield signInWithPopup(auth, googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n  try {\n    const { user } = yield signInWithEmailAndPassword(auth, email, password);\n    if (user === undefined) {\n      return;\n    }\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    // check if user is signed in or not\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nexport function* signUserOut() {\n  try {\n    yield signOut(auth);\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n\nexport function* signUserUp({ payload: { email, password, displayName } }) {\n  try {\n    const { user } = yield createUserWithEmailAndPassword(\n      auth,\n      email,\n      password\n    );\n    console.log(user);\n    console.log(displayName);\n    yield put(signUpSuccess({ user, additionalData: { displayName } }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\n\nexport function* signInAfterSignUp({ payload: { user, additionalData } }) {\n  yield getSnapShotFromUserAuth(user, additionalData);\n}\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signUserOut);\n}\n\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUserUp);\n}\n\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(onCheckUserSession),\n    call(onSignOutStart),\n    call(onSignUpStart),\n    call(onSignUpSuccess),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}