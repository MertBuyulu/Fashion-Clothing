{"ast":null,"code":"var _jsxFileName = \"/Users/mert/Desktop/Side Projects/Ecommerce-App/client/src/components/with-spinner/with-spinner.component.jsx\";\nimport React from \"react\";\nimport * as S from \"./with-spinner.styles\"; // this is a reuseable higher order component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WithSpinner = WrappedComponent => {\n  const Spinner = ({\n    isLoading,\n    ...otherProps\n  }) => {\n    // if the data is still being fetched from the backend run the spinner animation\n    return isLoading ? /*#__PURE__*/_jsxDEV(S.SpinnerOverlay, {\n      children: /*#__PURE__*/_jsxDEV(S.SpinnerContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this) :\n    /*#__PURE__*/\n    // else run the component with the data being fetched\n    _jsxDEV(WrappedComponent, { ...otherProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  };\n\n  return Spinner;\n};\n\n_c = WithSpinner;\nexport default WithSpinner;\n\nvar _c;\n\n$RefreshReg$(_c, \"WithSpinner\");","map":{"version":3,"sources":["/Users/mert/Desktop/Side Projects/Ecommerce-App/client/src/components/with-spinner/with-spinner.component.jsx"],"names":["React","S","WithSpinner","WrappedComponent","Spinner","isLoading","otherProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,CAAZ,MAAmB,uBAAnB,C,CAEA;;;;AACA,MAAMC,WAAW,GAAIC,gBAAD,IAAsB;AACxC,QAAMC,OAAO,GAAG,CAAC;AAAEC,IAAAA,SAAF;AAAa,OAAGC;AAAhB,GAAD,KAAkC;AAChD;AACA,WAAOD,SAAS,gBACd,QAAC,CAAD,CAAG,cAAH;AAAA,6BACE,QAAC,CAAD,CAAG,gBAAH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADc;AAAA;AAKd;AACA,YAAC,gBAAD,OAAsBC;AAAtB;AAAA;AAAA;AAAA;AAAA,YANF;AAQD,GAVD;;AAWA,SAAOF,OAAP;AACD,CAbD;;KAAMF,W;AAeN,eAAeA,WAAf","sourcesContent":["import React from \"react\";\nimport * as S from \"./with-spinner.styles\";\n\n// this is a reuseable higher order component\nconst WithSpinner = (WrappedComponent) => {\n  const Spinner = ({ isLoading, ...otherProps }) => {\n    // if the data is still being fetched from the backend run the spinner animation\n    return isLoading ? (\n      <S.SpinnerOverlay>\n        <S.SpinnerContainer />\n      </S.SpinnerOverlay>\n    ) : (\n      // else run the component with the data being fetched\n      <WrappedComponent {...otherProps} />\n    );\n  };\n  return Spinner;\n};\n\nexport default WithSpinner;\n"]},"metadata":{},"sourceType":"module"}