{"ast":null,"code":"import { takeEvery } from \"redux-saga/effects\";\nimport ShopActionTypes from \"./shop.types\";\nimport { convertCollectionToMap, firestore } from \"../../firebase/firebase.utils\"; // all generator functions must have yield inside of them.\n// saga middleware wants to run all sagas concurrently.\n\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"Im fired\");\n  const collectionRef = collection(firestore, \"collections\");\n  dispatch(fetchCollectionStart()); // fetch the collections\n\n  getDocs(collectionRef).then(snapshot => {\n    const collectionsMap = convertCollectionToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n} //We use takeEvery to start a new fetchCollectionsAsync task on each dispatched FETCH_COLLECTIONS_START action\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/mert/Desktop/Side Projects/ecommerce-app/src/redux/shop/shop.saga.js"],"names":["takeEvery","ShopActionTypes","convertCollectionToMap","firestore","fetchCollectionsAsync","console","log","collectionRef","collection","dispatch","fetchCollectionStart","getDocs","then","snapshot","collectionsMap","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SACEC,sBADF,EAEEC,SAFF,QAGO,+BAHP,C,CAKA;AACA;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAN;AAEA,QAAMC,aAAa,GAAGC,UAAU,CAACL,SAAD,EAAY,aAAZ,CAAhC;AACAM,EAAAA,QAAQ,CAACC,oBAAoB,EAArB,CAAR,CAJuC,CAMvC;;AACAC,EAAAA,OAAO,CAACJ,aAAD,CAAP,CACGK,IADH,CACSC,QAAD,IAAc;AAClB,UAAMC,cAAc,GAAGZ,sBAAsB,CAACW,QAAD,CAA7C;AACAJ,IAAAA,QAAQ,CAACM,uBAAuB,CAACD,cAAD,CAAxB,CAAR;AACD,GAJH,EAKGE,KALH,CAKUC,KAAD,IAAWR,QAAQ,CAACS,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAL5B;AAMD,C,CAED;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMpB,SAAS,CACbC,eAAe,CAACoB,uBADH,EAEbjB,qBAFa,CAAf;AAID","sourcesContent":["import { takeEvery } from \"redux-saga/effects\";\nimport ShopActionTypes from \"./shop.types\";\n\nimport {\n  convertCollectionToMap,\n  firestore,\n} from \"../../firebase/firebase.utils\";\n\n// all generator functions must have yield inside of them.\n// saga middleware wants to run all sagas concurrently.\nexport function* fetchCollectionsAsync() {\n  yield console.log(\"Im fired\");\n\n  const collectionRef = collection(firestore, \"collections\");\n  dispatch(fetchCollectionStart());\n\n  // fetch the collections\n  getDocs(collectionRef)\n    .then((snapshot) => {\n      const collectionsMap = convertCollectionToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    })\n    .catch((error) => dispatch(fetchCollectionsFailure(error.message)));\n}\n\n//We use takeEvery to start a new fetchCollectionsAsync task on each dispatched FETCH_COLLECTIONS_START action\nexport function* fetchCollectionsStart() {\n  yield takeEvery(\n    ShopActionTypes.FETCH_COLLECTIONS_START,\n    fetchCollectionsAsync\n  );\n}\n"]},"metadata":{},"sourceType":"module"}