{"ast":null,"code":"import { takeLatest, call, put } from \"redux-saga/effects\";\nimport ShopActionTypes from \"./shop.types\";\nimport { collection, getDocs } from \"firebase/firestore\";\nimport { convertCollectionToMap, firestore } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsFailure, fetchCollectionsSuccess } from \"./shop.actions\"; // all generator functions must have yield inside of them.\n// saga middleware wants to run all sagas concurrently.\n\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = collection(firestore, \"collections\");\n    const snapShot = yield getDocs(collectionRef);\n    const collectionsMap = yield call(convertCollectionToMap, snapShot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n} //We use takeEvery to start a new fetchCollectionsAsync task on each dispatched FETCH_COLLECTIONS_START action\n\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/mert/Desktop/Side Projects/ecommerce-app/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","ShopActionTypes","collection","getDocs","convertCollectionToMap","firestore","fetchCollectionsFailure","fetchCollectionsSuccess","fetchCollectionsAsync","collectionRef","snapShot","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,oBAApC;AAEA,SACEC,sBADF,EAEEC,SAFF,QAGO,+BAHP;AAKA,SACEC,uBADF,EAEEC,uBAFF,QAGO,gBAHP,C,CAKA;AACA;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,MAAI;AACF,UAAMC,aAAa,GAAGP,UAAU,CAACG,SAAD,EAAY,aAAZ,CAAhC;AACA,UAAMK,QAAQ,GAAG,MAAMP,OAAO,CAACM,aAAD,CAA9B;AACA,UAAME,cAAc,GAAG,MAAMZ,IAAI,CAACK,sBAAD,EAAyBM,QAAzB,CAAjC;AACA,UAAMV,GAAG,CAACO,uBAAuB,CAACI,cAAD,CAAxB,CAAT;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAMZ,GAAG,CAACM,uBAAuB,CAACM,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMhB,UAAU,CACdG,eAAe,CAACc,uBADF,EAEdP,qBAFc,CAAhB;AAID","sourcesContent":["import { takeLatest, call, put } from \"redux-saga/effects\";\nimport ShopActionTypes from \"./shop.types\";\n\nimport { collection, getDocs } from \"firebase/firestore\";\n\nimport {\n  convertCollectionToMap,\n  firestore,\n} from \"../../firebase/firebase.utils\";\n\nimport {\n  fetchCollectionsFailure,\n  fetchCollectionsSuccess,\n} from \"./shop.actions\";\n\n// all generator functions must have yield inside of them.\n// saga middleware wants to run all sagas concurrently.\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = collection(firestore, \"collections\");\n    const snapShot = yield getDocs(collectionRef);\n    const collectionsMap = yield call(convertCollectionToMap, snapShot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\n\n//We use takeEvery to start a new fetchCollectionsAsync task on each dispatched FETCH_COLLECTIONS_START action\nexport function* fetchCollectionsStart() {\n  yield takeLatest(\n    ShopActionTypes.FETCH_COLLECTIONS_START,\n    fetchCollectionsAsync\n  );\n}\n"]},"metadata":{},"sourceType":"module"}