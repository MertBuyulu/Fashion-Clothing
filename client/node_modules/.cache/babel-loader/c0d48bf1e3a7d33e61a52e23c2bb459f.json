{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, onAuthStateChanged, signInWithPopup } from \"firebase/auth\"; // signInWithRedirect does not give user closed the pop up error\n\nimport { getFirestore, collection, doc, getDoc, setDoc, writeBatch } from \"firebase/firestore\";\nconst config = {\n  apiKey: \"AIzaSyCRYsDOZ4_Pi9JPVjNHRyFDP5A0RVk9Zyo\",\n  authDomain: \"ecommerce-db-fdef6.firebaseapp.com\",\n  projectId: \"ecommerce-db-fdef6\",\n  storageBucket: \"ecommerce-db-fdef6.appspot.com\",\n  messagingSenderId: \"378444362884\",\n  appId: \"1:378444362884:web:e45424fcdd2e91dcf67ed1\"\n};\ninitializeApp(config);\nexport const firestore = getFirestore();\nexport const auth = getAuth();\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // if the user is not signed in run the code below.\n  if (!userAuth) return;\n  const userRef = doc(firestore, `users/${userAuth.uid}`);\n  const snapShot = await getDoc(userRef);\n\n  if (!snapShot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log(\"error creating user\", err.message);\n    }\n  }\n\n  return userRef;\n}; // utility function to create collections with multiple documents in one request\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const batch = writeBatch(firestore);\n  const newDocRef = collection(firestore, collectionKey); // iterate over each collection inside of collection cluster and add it to the data base\n\n  objectsToAdd.forEach(obj => {\n    const docRef = doc(newDocRef);\n    batch.set(docRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      items,\n      title\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); // this will create one big object consisting the individual collection\n  // objects we get back from collections.docs.map above\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {}); // {} means the initial value of accumulator is an empty object\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribeFromAuth = onAuthStateChanged(auth, userAuth => {\n      resolve(userAuth);\n    }, reject);\n    unsubscribeFromAuth();\n  });\n};\nexport const googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompts: \"select_account\"\n});\nexport const signInWithGoogle = () => signInWithPopup(auth, googleProvider);","map":{"version":3,"sources":["/Users/mert/Desktop/Side Projects/ecommerce-app/src/firebase/firebase.utils.js"],"names":["initializeApp","getAuth","GoogleAuthProvider","onAuthStateChanged","signInWithPopup","getFirestore","collection","doc","getDoc","setDoc","writeBatch","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","createUserProfileDocument","userAuth","additionalData","userRef","uid","snapShot","exists","displayName","email","createdAt","Date","err","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","batch","newDocRef","forEach","obj","docRef","set","commit","convertCollectionToMap","collections","transformedCollection","docs","map","items","title","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribeFromAuth","googleProvider","setCustomParameters","prompts","signInWithGoogle"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  GoogleAuthProvider,\n  onAuthStateChanged,\n  signInWithPopup,\n} from \"firebase/auth\";\n// signInWithRedirect does not give user closed the pop up error\nimport {\n  getFirestore,\n  collection,\n  doc,\n  getDoc,\n  setDoc,\n  writeBatch,\n} from \"firebase/firestore\";\n\nconst config = {\n  apiKey: \"AIzaSyCRYsDOZ4_Pi9JPVjNHRyFDP5A0RVk9Zyo\",\n  authDomain: \"ecommerce-db-fdef6.firebaseapp.com\",\n  projectId: \"ecommerce-db-fdef6\",\n  storageBucket: \"ecommerce-db-fdef6.appspot.com\",\n  messagingSenderId: \"378444362884\",\n  appId: \"1:378444362884:web:e45424fcdd2e91dcf67ed1\",\n};\n\ninitializeApp(config);\n\nexport const firestore = getFirestore();\nexport const auth = getAuth();\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // if the user is not signed in run the code below.\n  if (!userAuth) return;\n\n  const userRef = doc(firestore, `users/${userAuth.uid}`);\n  const snapShot = await getDoc(userRef);\n\n  if (!snapShot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n    } catch (err) {\n      console.log(\"error creating user\", err.message);\n    }\n  }\n  return userRef;\n};\n\n// utility function to create collections with multiple documents in one request\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const batch = writeBatch(firestore);\n  const newDocRef = collection(firestore, collectionKey);\n\n  // iterate over each collection inside of collection cluster and add it to the data base\n  objectsToAdd.forEach((obj) => {\n    const docRef = doc(newDocRef);\n    batch.set(docRef, obj);\n  });\n\n  return await batch.commit();\n};\n\nexport const convertCollectionToMap = (collections) => {\n  const transformedCollection = collections.docs.map((doc) => {\n    const { items, title } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n\n  // this will create one big object consisting the individual collection\n  // objects we get back from collections.docs.map above\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {}); // {} means the initial value of accumulator is an empty object\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribeFromAuth = onAuthStateChanged(\n      auth,\n      (userAuth) => {\n        resolve(userAuth);\n      },\n      reject\n    );\n    unsubscribeFromAuth();\n  });\n};\n\nexport const googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompts: \"select_account\" });\nexport const signInWithGoogle = () => signInWithPopup(auth, googleProvider);\n"]},"metadata":{},"sourceType":"module"}